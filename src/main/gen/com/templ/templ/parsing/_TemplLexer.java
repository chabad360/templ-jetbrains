// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _TemplLexer.flex

package com.templ.templ.parsing;

import com.intellij.psi.tree.IElementType;
import com.intellij.lexer.FlexLexer;
import org.bouncycastle.util.Arrays;
import com.intellij.util.containers.Stack;import q.H.W;

import static com.intellij.psi.TokenType.*;
import static com.templ.templ.psi.TemplTypes.*;


public class _TemplLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_TEMPL_DECLARATION_START = 2;
  public static final int IN_TEMPL_DECLARATION_BODY = 4;
  public static final int IN_CSS_DECLARATION_START = 6;
  public static final int IN_CSS_DECLARATION_PARAMS = 8;
  public static final int IN_CSS_DECLARATION_BODY = 10;
  public static final int IN_SCRIPT_DECLARATION_START = 12;
  public static final int IN_SCRIPT_DECLARATION_BODY = 14;
  public static final int IN_RAW_GO = 16;
  public static final int IN_EXPR = 18;
  public static final int IN_CLASS_EXPR = 20;
  public static final int IN_COMPONENT_IMPORT = 22;
  public static final int IN_COMPONENT_IMPORT_STRUCT_LITERAL = 24;
  public static final int IN_COMPONENT_IMPORT_PARAMS = 26;
  public static final int IN_COMPONENT_IMPORT_PARAMS_END_WITHOUT_CHILDREN = 28;
  public static final int IN_COMPONENT_IMPORT_CHILDREN_BLOCK_START = 30;
  public static final int IN_BLOCK_COMMENT = 32;
  public static final int IN_GO_STRING = 34;
  public static final int IN_GO_RAW_STRING = 36;
  public static final int IN_HTML_COMMENT = 38;
  public static final int IN_HTML_TAG_OPENER = 40;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  1,  2,  2,  3,  4,  5,  5,  6,  6,  7,  8,  9,  9, 10, 11, 
    12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 16, 16, 18, 18, 
    19, 19, 20, 20, 21, 21, 22, 22, 23, 24
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\4\0\1\11\1\12\1\13\1\14\1\0"+
    "\1\15\1\16\1\17\1\20\12\21\1\22\1\0\1\23"+
    "\1\24\1\25\1\26\1\27\32\21\1\0\1\30\2\0"+
    "\1\21\1\31\1\32\1\21\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\21\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\21\1\50\1\51\1\52\1\53\1\21"+
    "\1\54\3\21\1\55\1\0\1\56\7\0\1\3\32\0"+
    "\1\57\11\0\1\21\12\0\1\21\4\0\1\21\5\0"+
    "\27\21\1\0\37\21\1\0\u01ca\21\4\0\14\21\16\0"+
    "\5\21\7\0\1\21\1\0\1\21\21\0\165\21\1\0"+
    "\2\21\2\0\4\21\1\0\1\21\6\0\1\21\1\0"+
    "\3\21\1\0\1\21\1\0\24\21\1\0\123\21\1\0"+
    "\213\21\1\0\255\21\1\0\46\21\2\0\1\21\6\0"+
    "\51\21\10\0\55\21\1\0\1\21\1\0\2\21\1\0"+
    "\2\21\1\0\1\21\10\0\33\21\4\0\4\21\35\0"+
    "\13\21\5\0\112\21\4\0\146\21\1\0\10\21\2\0"+
    "\12\21\1\0\23\21\2\0\1\21\20\0\73\21\2\0"+
    "\145\21\16\0\66\21\4\0\1\21\2\0\1\21\2\0"+
    "\56\21\22\0\34\21\4\0\13\21\65\0\25\21\1\0"+
    "\10\21\25\0\17\21\1\0\201\21\2\0\12\21\1\0"+
    "\23\21\1\0\10\21\2\0\2\21\2\0\26\21\1\0"+
    "\7\21\1\0\1\21\3\0\4\21\2\0\11\21\2\0"+
    "\2\21\2\0\4\21\10\0\1\21\4\0\2\21\1\0"+
    "\5\21\2\0\14\21\12\0\1\21\1\0\1\21\2\0"+
    "\3\21\1\0\6\21\4\0\2\21\2\0\26\21\1\0"+
    "\7\21\1\0\2\21\1\0\2\21\1\0\2\21\2\0"+
    "\1\21\1\0\5\21\4\0\2\21\2\0\3\21\3\0"+
    "\1\21\7\0\4\21\1\0\1\21\7\0\20\21\13\0"+
    "\3\21\1\0\11\21\1\0\3\21\1\0\26\21\1\0"+
    "\7\21\1\0\2\21\1\0\5\21\2\0\12\21\1\0"+
    "\3\21\1\0\3\21\2\0\1\21\17\0\4\21\2\0"+
    "\12\21\11\0\7\21\1\0\3\21\1\0\10\21\2\0"+
    "\2\21\2\0\26\21\1\0\7\21\1\0\2\21\1\0"+
    "\5\21\2\0\11\21\2\0\2\21\2\0\3\21\10\0"+
    "\2\21\4\0\2\21\1\0\5\21\2\0\12\21\1\0"+
    "\1\21\20\0\2\21\1\0\6\21\3\0\3\21\1\0"+
    "\4\21\3\0\2\21\1\0\1\21\1\0\2\21\3\0"+
    "\2\21\3\0\3\21\3\0\14\21\4\0\5\21\3\0"+
    "\3\21\1\0\4\21\2\0\1\21\6\0\1\21\16\0"+
    "\12\21\20\0\15\21\1\0\3\21\1\0\27\21\1\0"+
    "\20\21\3\0\10\21\1\0\3\21\1\0\4\21\7\0"+
    "\2\21\1\0\3\21\5\0\4\21\2\0\12\21\20\0"+
    "\4\21\1\0\10\21\1\0\3\21\1\0\27\21\1\0"+
    "\12\21\1\0\5\21\2\0\11\21\1\0\3\21\1\0"+
    "\4\21\7\0\2\21\7\0\1\21\1\0\4\21\2\0"+
    "\12\21\1\0\2\21\15\0\4\21\1\0\10\21\1\0"+
    "\3\21\1\0\63\21\1\0\3\21\1\0\5\21\5\0"+
    "\4\21\7\0\5\21\2\0\12\21\12\0\6\21\2\0"+
    "\2\21\1\0\22\21\3\0\30\21\1\0\11\21\1\0"+
    "\1\21\2\0\7\21\3\0\1\21\4\0\6\21\1\0"+
    "\1\21\1\0\10\21\6\0\12\21\2\0\2\21\15\0"+
    "\72\21\5\0\17\21\1\0\12\21\47\0\2\21\1\0"+
    "\1\21\1\0\5\21\1\0\30\21\1\0\1\21\1\0"+
    "\27\21\2\0\5\21\1\0\1\21\1\0\6\21\2\0"+
    "\12\21\2\0\4\21\40\0\1\21\27\0\2\21\6\0"+
    "\12\21\13\0\1\21\1\0\1\21\1\0\1\21\4\0"+
    "\12\21\1\0\44\21\4\0\24\21\1\0\22\21\1\0"+
    "\44\21\11\0\1\21\71\0\112\21\6\0\116\21\2\0"+
    "\46\21\1\0\1\21\5\0\1\21\2\0\53\21\1\0"+
    "\115\21\1\0\4\21\2\0\7\21\1\0\1\21\1\0"+
    "\4\21\2\0\51\21\1\0\4\21\2\0\41\21\1\0"+
    "\4\21\2\0\7\21\1\0\1\21\1\0\4\21\2\0"+
    "\17\21\1\0\71\21\1\0\4\21\2\0\103\21\2\0"+
    "\3\21\40\0\20\21\20\0\126\21\2\0\6\21\3\0"+
    "\u016c\21\2\0\21\21\1\57\32\21\5\0\113\21\3\0"+
    "\13\21\7\0\15\21\1\0\7\21\13\0\25\21\13\0"+
    "\24\21\14\0\15\21\1\0\3\21\1\0\2\21\14\0"+
    "\124\21\3\0\1\21\4\0\2\21\2\0\12\21\41\0"+
    "\3\21\2\0\12\21\6\0\131\21\7\0\53\21\5\0"+
    "\106\21\12\0\37\21\1\0\14\21\4\0\14\21\12\0"+
    "\50\21\2\0\5\21\13\0\54\21\4\0\32\21\6\0"+
    "\12\21\46\0\34\21\4\0\77\21\1\0\35\21\2\0"+
    "\13\21\6\0\12\21\15\0\1\21\10\0\17\21\101\0"+
    "\114\21\4\0\12\21\21\0\11\21\14\0\164\21\14\0"+
    "\70\21\10\0\12\21\3\0\61\21\2\0\11\21\7\0"+
    "\53\21\2\0\3\21\20\0\3\21\1\0\47\21\5\0"+
    "\372\21\1\0\33\21\2\0\6\21\2\0\46\21\2\0"+
    "\6\21\2\0\10\21\1\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\37\21\2\0\65\21\1\0\7\21\1\0"+
    "\1\21\3\0\3\21\1\0\7\21\3\0\4\21\2\0"+
    "\6\21\4\0\15\21\5\0\3\21\1\0\7\21\3\0"+
    "\13\57\35\0\2\3\5\0\1\57\17\0\2\21\23\0"+
    "\1\21\12\0\1\57\21\0\1\21\15\0\1\21\20\0"+
    "\15\21\63\0\41\21\21\0\1\21\4\0\1\21\2\0"+
    "\12\21\1\0\1\21\3\0\5\21\6\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\4\21\1\0\13\21\2\0"+
    "\4\21\5\0\5\21\4\0\1\21\21\0\51\21\u022d\0"+
    "\64\21\26\0\57\21\1\0\57\21\1\0\205\21\6\0"+
    "\11\21\14\0\46\21\1\0\1\21\5\0\1\21\2\0"+
    "\70\21\7\0\1\21\17\0\30\21\11\0\7\21\1\0"+
    "\7\21\1\0\7\21\1\0\7\21\1\0\7\21\1\0"+
    "\7\21\1\0\7\21\1\0\7\21\1\0\40\21\57\0"+
    "\1\21\320\0\1\57\4\0\3\21\31\0\17\21\1\0"+
    "\5\21\2\0\5\21\4\0\126\21\2\0\2\21\2\0"+
    "\3\21\1\0\132\21\1\0\4\21\5\0\53\21\1\0"+
    "\136\21\21\0\33\21\65\0\306\21\112\0\360\21\20\0"+
    "\215\21\103\0\56\21\2\0\15\21\3\0\34\21\24\0"+
    "\63\21\1\0\12\21\1\0\163\21\45\0\11\21\2\0"+
    "\147\21\2\0\65\21\2\0\5\21\60\0\61\21\30\0"+
    "\64\21\14\0\106\21\12\0\12\21\6\0\30\21\3\0"+
    "\1\21\1\0\61\21\2\0\44\21\14\0\35\21\3\0"+
    "\101\21\16\0\13\21\6\0\37\21\1\0\67\21\11\0"+
    "\16\21\2\0\12\21\6\0\27\21\3\0\111\21\30\0"+
    "\3\21\2\0\20\21\2\0\5\21\12\0\6\21\2\0"+
    "\6\21\2\0\6\21\11\0\7\21\1\0\7\21\1\0"+
    "\53\21\1\0\14\21\10\0\173\21\1\0\2\21\2\0"+
    "\12\21\6\0\244\21\14\0\27\21\4\0\61\21\4\0"+
    "\u0100\60\156\21\2\0\152\21\46\0\7\21\14\0\5\21"+
    "\5\0\14\21\1\0\15\21\1\0\5\21\1\0\1\21"+
    "\1\0\2\21\1\0\2\21\1\0\154\21\41\0\153\21"+
    "\22\0\100\21\2\0\66\21\50\0\14\21\4\0\20\21"+
    "\20\0\20\21\3\0\2\21\30\0\3\21\40\0\5\21"+
    "\1\0\207\21\23\0\12\21\7\0\32\21\4\0\1\21"+
    "\1\0\32\21\13\0\131\21\3\0\6\21\2\0\6\21"+
    "\2\0\6\21\2\0\3\21\43\0\14\21\1\0\32\21"+
    "\1\0\23\21\1\0\2\21\1\0\17\21\2\0\16\21"+
    "\42\0\173\21\105\0\65\21\210\0\1\21\202\0\35\21"+
    "\3\0\61\21\17\0\1\21\37\0\40\21\15\0\36\21"+
    "\5\0\53\21\5\0\36\21\2\0\44\21\4\0\10\21"+
    "\1\0\5\21\52\0\236\21\2\0\12\21\6\0\44\21"+
    "\4\0\44\21\4\0\50\21\10\0\64\21\234\0\67\21"+
    "\11\0\26\21\12\0\10\21\230\0\6\21\2\0\1\21"+
    "\1\0\54\21\1\0\2\21\3\0\1\21\2\0\27\21"+
    "\12\0\27\21\11\0\37\21\101\0\23\21\1\0\2\21"+
    "\12\0\26\21\12\0\32\21\106\0\70\21\6\0\2\21"+
    "\100\0\4\21\1\0\2\21\5\0\10\21\1\0\3\21"+
    "\1\0\35\21\2\0\3\21\4\0\1\21\40\0\35\21"+
    "\3\0\35\21\43\0\10\21\1\0\36\21\31\0\66\21"+
    "\12\0\26\21\12\0\23\21\15\0\22\21\156\0\111\21"+
    "\67\0\63\21\15\0\63\21\15\0\50\21\10\0\12\21"+
    "\306\0\35\21\12\0\1\21\10\0\41\21\217\0\27\21"+
    "\11\0\107\21\37\0\12\21\17\0\74\21\25\0\31\21"+
    "\7\0\12\21\6\0\65\21\1\0\12\21\4\0\3\21"+
    "\11\0\44\21\2\0\1\21\11\0\105\21\4\0\4\21"+
    "\3\0\13\21\1\0\1\21\43\0\22\21\1\0\45\21"+
    "\6\0\1\21\101\0\7\21\1\0\1\21\1\0\4\21"+
    "\1\0\17\21\1\0\12\21\7\0\73\21\5\0\12\21"+
    "\6\0\4\21\1\0\10\21\2\0\2\21\2\0\26\21"+
    "\1\0\7\21\1\0\2\21\1\0\5\21\1\0\12\21"+
    "\2\0\2\21\2\0\3\21\2\0\1\21\6\0\1\21"+
    "\5\0\7\21\2\0\7\21\3\0\5\21\213\0\113\21"+
    "\5\0\12\21\4\0\2\21\40\0\106\21\1\0\1\21"+
    "\10\0\12\21\246\0\66\21\2\0\11\21\27\0\6\21"+
    "\42\0\101\21\3\0\1\21\13\0\12\21\46\0\71\21"+
    "\7\0\12\21\66\0\33\21\2\0\17\21\4\0\12\21"+
    "\306\0\73\21\145\0\112\21\25\0\1\21\240\0\10\21"+
    "\2\0\56\21\2\0\10\21\1\0\2\21\33\0\77\21"+
    "\10\0\1\21\10\0\112\21\3\0\1\21\42\0\71\21"+
    "\7\0\11\21\1\0\55\21\1\0\11\21\17\0\12\21"+
    "\30\0\36\21\2\0\26\21\1\0\16\21\111\0\7\21"+
    "\1\0\2\21\1\0\54\21\3\0\1\21\1\0\2\21"+
    "\1\0\11\21\10\0\12\21\6\0\6\21\1\0\2\21"+
    "\1\0\45\21\1\0\2\21\1\0\6\21\7\0\12\21"+
    "\u0136\0\27\21\11\0\232\21\146\0\157\21\21\0\304\21"+
    "\274\0\57\21\321\0\107\21\271\0\71\21\7\0\37\21"+
    "\1\0\12\21\146\0\36\21\2\0\5\21\13\0\67\21"+
    "\11\0\4\21\14\0\12\21\11\0\25\21\5\0\23\21"+
    "\260\0\100\21\200\0\113\21\4\0\71\21\7\0\21\21"+
    "\100\0\2\21\1\0\1\21\34\0\370\21\10\0\363\21"+
    "\15\0\37\21\61\0\3\21\21\0\4\21\10\0\u018c\21"+
    "\4\0\153\21\5\0\15\21\3\0\11\21\7\0\12\21"+
    "\3\0\2\21\306\0\5\21\3\0\6\21\10\0\10\21"+
    "\2\0\7\21\36\0\4\21\224\0\3\21\273\0\125\21"+
    "\1\0\107\21\1\0\2\21\2\0\1\21\2\0\2\21"+
    "\2\0\4\21\1\0\14\21\1\0\1\21\1\0\7\21"+
    "\1\0\101\21\1\0\4\21\2\0\10\21\1\0\7\21"+
    "\1\0\34\21\1\0\4\21\1\0\5\21\1\0\1\21"+
    "\3\0\7\21\1\0\u0154\21\2\0\31\21\1\0\31\21"+
    "\1\0\37\21\1\0\31\21\1\0\37\21\1\0\31\21"+
    "\1\0\37\21\1\0\31\21\1\0\37\21\1\0\31\21"+
    "\1\0\10\21\2\0\151\21\4\0\62\21\10\0\1\21"+
    "\16\0\1\21\26\0\5\21\1\0\17\21\120\0\7\21"+
    "\1\0\21\21\2\0\7\21\1\0\2\21\1\0\5\21"+
    "\325\0\55\21\3\0\16\21\2\0\12\21\4\0\1\21"+
    "\u0171\0\72\21\6\0\305\21\13\0\7\21\51\0\114\21"+
    "\4\0\12\21\246\0\4\21\1\0\33\21\1\0\2\21"+
    "\1\0\1\21\2\0\1\21\1\0\12\21\1\0\4\21"+
    "\1\0\1\21\1\0\1\21\6\0\1\21\4\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\3\21\1\0\2\21"+
    "\1\0\1\21\2\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\2\21\1\0\1\21"+
    "\2\0\4\21\1\0\7\21\1\0\4\21\1\0\4\21"+
    "\1\0\1\21\1\0\12\21\1\0\21\21\5\0\3\21"+
    "\1\0\5\21\1\0\21\21\164\0\32\21\6\0\32\21"+
    "\6\0\32\21\166\0\327\21\51\0\65\21\13\0\336\21"+
    "\2\0\u0182\21\16\0\u0131\21\37\0\36\21\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\31\0\1\1\1\2\1\1\1\3\4\1\3\4\3\5"+
    "\1\6\1\5\1\7\1\10\1\5\1\11\5\5\1\12"+
    "\1\13\1\14\1\15\1\13\1\16\1\13\1\17\1\20"+
    "\1\21\1\17\2\22\1\12\3\23\2\24\3\25\1\26"+
    "\1\14\2\26\1\27\1\30\2\31\1\32\1\33\4\34"+
    "\1\35\1\36\3\37\1\40\1\41\2\40\2\5\1\42"+
    "\3\5\1\43\1\44\4\0\2\45\3\0\1\46\1\47"+
    "\15\0\2\50\2\51\1\52\2\0\2\53\1\54\1\55"+
    "\1\56\6\0\1\57\14\0\1\60\1\61\1\62\4\0"+
    "\1\63\4\0\2\64\5\0\1\65\4\0\1\66\4\0"+
    "\1\67\3\0\3\70\1\0\2\71\5\0\3\72\1\73"+
    "\1\0\1\74\2\0\1\75\2\76\1\0\1\77\1\0"+
    "\2\100\2\0\3\101\1\0\2\102\1\103\1\0\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\u04c9\0\u04c9\0\u04fa\0\u04c9\0\u052b\0\u055c\0\u058d"+
    "\0\u05be\0\u04c9\0\u04fa\0\u05ef\0\u04c9\0\u0620\0\u04fa\0\u0651"+
    "\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u04c9\0\u0746\0\u0777\0\u07a8"+
    "\0\u07d9\0\u080a\0\u06e4\0\u04c9\0\u083b\0\u04c9\0\u04fa\0\u086c"+
    "\0\u089d\0\u04c9\0\u04c9\0\u04c9\0\u04fa\0\u04c9\0\u04fa\0\u04c9"+
    "\0\u04c9\0\u04fa\0\u08ce\0\u04c9\0\u04fa\0\u04c9\0\u04fa\0\u08ff"+
    "\0\u04c9\0\u04c9\0\u04fa\0\u0930\0\u04c9\0\u04c9\0\u04c9\0\u04fa"+
    "\0\u04c9\0\u04c9\0\u0961\0\u0992\0\u04c9\0\u09c3\0\u0961\0\u04c9"+
    "\0\u04c9\0\u09f4\0\u04fa\0\u04c9\0\u04c9\0\u04fa\0\u0a25\0\u0a56"+
    "\0\u0a87\0\u04c9\0\u0ab8\0\u0ae9\0\u0b1a\0\u04c9\0\u0b4b\0\u0b7c"+
    "\0\u0bad\0\u0bde\0\u0c0f\0\u04c9\0\u0c40\0\u0c71\0\u0ca2\0\u0682"+
    "\0\u04c9\0\u04c9\0\u06e4\0\u0cd3\0\u0715\0\u0746\0\u0777\0\u07a8"+
    "\0\u07d9\0\u080a\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u04c9"+
    "\0\u0df9\0\u04c9\0\u0e2a\0\u04c9\0\u0e5b\0\u0961\0\u04c9\0\u0e8c"+
    "\0\u04c9\0\u04c9\0\u04c9\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81"+
    "\0\u0b1a\0\u04c9\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7"+
    "\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd\0\u04c9\0\u04c9"+
    "\0\u04c9\0\u11fe\0\u122f\0\u1260\0\u1291\0\u04c9\0\u12c2\0\u12f3"+
    "\0\u1324\0\u1355\0\u04c9\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a"+
    "\0\u147b\0\u04c9\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u04c9\0\u1570"+
    "\0\u15a1\0\u15d2\0\u1603\0\u04c9\0\u1634\0\u1665\0\u1696\0\u04c9"+
    "\0\u14dd\0\u16c7\0\u16f8\0\u04c9\0\u1729\0\u175a\0\u178b\0\u17bc"+
    "\0\u17ed\0\u181e\0\u04c9\0\u1696\0\u184f\0\u04c9\0\u1880\0\u04c9"+
    "\0\u18b1\0\u18e2\0\u04c9\0\u04c9\0\u1913\0\u1944\0\u04c9\0\u1975"+
    "\0\u04c9\0\u19a6\0\u19d7\0\u1a08\0\u04c9\0\u1975\0\u1a39\0\u1a6a"+
    "\0\u04c9\0\u1a9b\0\u04c9\0\u1acc\0\u04c9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\10\32\1\33\7\32\1\34\10\32\1\35\37\32\1\33"+
    "\7\32\1\34\10\32\1\35\1\32\1\36\13\32\1\37"+
    "\1\32\1\40\1\41\6\32\10\42\1\33\7\42\1\43"+
    "\10\42\1\35\23\42\1\44\3\42\17\45\1\46\1\47"+
    "\2\45\1\50\1\45\1\51\27\45\1\52\1\53\3\45"+
    "\1\54\2\45\1\54\1\45\1\54\10\45\1\46\1\47"+
    "\2\45\1\50\1\45\1\51\1\45\1\55\3\45\1\56"+
    "\1\57\1\45\1\60\2\45\1\61\7\45\1\62\3\45"+
    "\1\52\1\63\2\45\1\64\6\65\3\64\1\66\5\64"+
    "\1\67\1\70\10\64\23\70\1\71\1\64\1\65\1\64"+
    "\12\72\1\73\1\74\4\72\1\75\40\72\20\76\1\77"+
    "\60\76\1\77\35\76\1\100\2\76\20\101\1\102\34\101"+
    "\1\103\3\101\20\104\1\105\60\104\1\105\35\104\1\100"+
    "\2\104\20\106\1\107\35\106\1\110\2\106\1\111\1\112"+
    "\2\111\1\112\1\111\1\112\1\111\1\33\7\111\1\113"+
    "\10\111\1\35\1\111\1\114\21\111\1\115\1\116\2\111"+
    "\20\117\1\120\34\117\1\121\1\122\2\117\1\123\1\124"+
    "\2\123\1\124\1\123\1\124\3\123\1\125\2\123\1\125"+
    "\1\123\1\125\1\126\6\123\1\127\25\123\1\125\3\123"+
    "\20\64\1\67\50\64\1\33\7\64\1\67\10\64\1\35"+
    "\30\64\1\112\2\64\1\112\1\64\1\112\11\64\1\67"+
    "\34\64\1\130\3\64\14\131\1\132\3\131\1\133\40\131"+
    "\2\134\4\64\2\134\1\135\7\134\1\136\7\134\1\137"+
    "\27\134\1\64\20\134\1\136\10\134\1\135\27\134\16\45"+
    "\1\140\1\45\1\47\60\45\1\47\3\45\1\141\1\142"+
    "\1\143\4\45\1\144\21\45\1\52\1\53\3\45\1\145"+
    "\2\45\1\145\1\45\1\145\11\45\1\47\3\45\1\141"+
    "\1\142\1\143\4\45\1\144\5\45\1\61\13\45\1\52"+
    "\1\63\2\45\75\0\1\146\3\0\1\147\111\0\1\150"+
    "\41\0\1\151\61\0\1\152\62\0\1\153\25\0\3\154"+
    "\1\155\54\0\1\156\2\0\1\156\1\0\1\156\10\0"+
    "\1\156\1\0\1\156\10\0\23\156\13\0\1\157\52\0"+
    "\1\160\2\0\1\160\1\0\1\160\20\0\1\161\106\0"+
    "\1\162\4\0\1\163\2\0\1\163\1\0\1\163\26\0"+
    "\1\164\24\0\1\165\2\0\1\165\1\0\1\165\20\0"+
    "\1\55\3\0\1\166\1\167\1\0\1\170\2\0\1\171"+
    "\7\0\1\172\41\0\1\173\63\0\1\174\71\0\1\175"+
    "\50\0\1\176\76\0\1\177\5\0\6\65\50\0\1\65"+
    "\22\0\1\70\10\0\23\70\6\0\3\200\1\201\55\0"+
    "\3\202\1\203\131\0\1\204\42\0\1\205\21\0\1\206"+
    "\1\207\1\0\1\206\1\210\1\206\53\0\1\206\1\207"+
    "\1\0\1\206\1\210\1\206\46\0\1\211\4\0\1\206"+
    "\1\207\1\0\1\206\1\210\1\206\5\0\1\146\3\0"+
    "\1\147\60\0\1\212\50\0\1\213\66\0\1\214\52\0"+
    "\1\215\1\216\73\0\1\217\77\0\1\220\16\0\1\221"+
    "\2\0\1\221\1\0\1\221\32\0\1\171\17\0\2\147"+
    "\4\0\52\147\52\0\1\222\42\0\1\223\75\0\1\224"+
    "\54\0\1\225\16\0\1\154\57\0\1\156\2\0\1\156"+
    "\1\0\1\156\10\0\1\156\1\0\1\156\10\0\23\156"+
    "\1\226\21\0\1\227\105\0\1\230\66\0\1\231\45\0"+
    "\1\232\72\0\1\233\10\0\55\176\1\234\3\176\41\0"+
    "\1\235\21\0\1\200\60\0\1\202\117\0\1\236\21\0"+
    "\1\207\103\0\1\237\33\0\10\215\1\240\50\215\11\216"+
    "\1\240\47\216\55\0\1\241\35\0\1\242\70\0\1\243"+
    "\57\0\1\244\66\0\1\245\11\0\56\226\1\45\2\226"+
    "\16\0\1\246\113\0\1\247\44\0\1\250\55\0\1\251"+
    "\27\0\6\252\50\0\1\252\3\0\3\253\1\254\125\0"+
    "\1\255\51\0\1\256\66\0\1\257\41\0\1\260\75\0"+
    "\1\261\54\0\1\262\52\0\1\263\23\0\22\250\1\264"+
    "\36\250\53\0\1\265\5\0\55\252\1\266\3\252\2\0"+
    "\1\267\111\0\1\270\61\0\1\271\75\0\1\272\46\0"+
    "\1\273\73\0\1\274\7\0\1\275\2\0\1\275\1\0"+
    "\1\276\46\0\1\277\4\0\1\264\2\300\1\301\1\302"+
    "\1\264\115\0\1\303\17\0\3\304\1\305\113\0\1\306"+
    "\70\0\1\307\34\0\1\310\71\0\1\311\24\0\1\275"+
    "\2\0\1\275\1\0\1\275\46\0\1\277\4\0\1\275"+
    "\2\0\1\275\1\0\1\275\32\0\1\312\13\0\1\277"+
    "\4\0\1\277\2\313\1\314\1\315\1\277\54\0\1\316"+
    "\130\0\1\317\10\0\1\320\56\0\55\306\1\321\3\306"+
    "\35\0\1\322\100\0\1\323\3\0\2\311\1\324\2\311"+
    "\1\325\53\311\36\0\1\326\24\0\1\327\100\0\1\330"+
    "\40\0\1\331\2\0\1\332\120\0\1\333\15\0\1\324"+
    "\56\0\55\326\1\334\3\326\1\0\1\330\2\335\1\336"+
    "\1\337\1\330\54\0\1\331\75\0\1\340\43\0\3\341"+
    "\1\342\55\0\1\343\75\0\1\344\43\0\1\345\75\0"+
    "\1\117\41\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6909];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\31\0\2\11\1\1\1\11\4\1\1\11\2\1\1\11"+
    "\7\1\1\11\6\1\1\11\1\1\1\11\3\1\3\11"+
    "\1\1\1\11\1\1\2\11\2\1\1\11\1\1\1\11"+
    "\2\1\2\11\2\1\3\11\1\1\2\11\2\1\1\11"+
    "\2\1\2\11\2\1\2\11\4\1\1\11\3\1\1\11"+
    "\1\1\4\0\1\11\1\1\3\0\2\11\15\0\1\11"+
    "\1\1\1\11\1\1\1\11\2\0\1\11\1\1\3\11"+
    "\6\0\1\11\14\0\3\11\4\0\1\11\4\0\1\11"+
    "\1\1\5\0\1\11\4\0\1\11\4\0\1\11\3\0"+
    "\1\11\2\1\1\0\1\11\1\1\5\0\1\11\2\1"+
    "\1\11\1\0\1\11\2\0\2\11\1\1\1\0\1\11"+
    "\1\0\1\11\1\1\2\0\1\11\2\1\1\0\1\11"+
    "\1\1\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private int braceNestingLevel = 0;
    private int parensNestingLevel = 0;
    private Stack<Integer> stateStack = new Stack<>();

    public void yyPushState(int newState) {
        stateStack.push(yystate());
        yybegin(newState);
    }

    public void yyReplaceState(int newState) {
        // Since the top of the stack is the previous state we want to pop to when replacing
        // the current state, we don't need to do any stack manipulation here.
        yybegin(newState);
    }

    public void yyResetState(int newState) {
        stateStack.clear();
        stateStack.push(yystate());
        yybegin(newState);
    }

    public void yyPopState() {
        yybegin(stateStack.pop());
    }

    public int peekPreviousState() {
        return stateStack.peek();
    }

    // Resolves the default token for given state, e.g., GO_ROOT_FRAGMENT for YYNITIAL.
    public IElementType resolveStateDefaultToken(int state) {
        switch (state) {
            case YYINITIAL: return GO_ROOT_FRAGMENT;
            case IN_EXPR: return GO_EXPR;
//            case IN_COMPONENT_IMPORT_PARAMS: return GO_COMPONENT_IMPORT_PARAMS;
            case IN_TEMPL_DECLARATION_START: return DECL_GO_TOKEN;
            default: throw new IllegalStateException("Unknown default token for state: " + state);
        }
    }

    public boolean isCommentEnabled() {
        return !Arrays.contains(new int[]{IN_BLOCK_COMMENT, IN_GO_STRING, IN_GO_RAW_STRING}, yystate());
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _TemplLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return GO_ROOT_FRAGMENT;
            }
          // fall through
          case 69: break;
          case 2:
            { yyPushState(IN_GO_STRING);
        return resolveStateDefaultToken(peekPreviousState());
            }
          // fall through
          case 70: break;
          case 3:
            { yyPushState(IN_GO_RAW_STRING);
        return resolveStateDefaultToken(peekPreviousState());
            }
          // fall through
          case 71: break;
          case 4:
            { return DECL_GO_TOKEN;
            }
          // fall through
          case 72: break;
          case 5:
            { return HTML_FRAGMENT;
            }
          // fall through
          case 73: break;
          case 6:
            { yyPushState(IN_HTML_TAG_OPENER);
        return HTML_FRAGMENT;
            }
          // fall through
          case 74: break;
          case 7:
            { yypushback(1); // IN_EXPR handles brace nesting
        yyPushState(IN_EXPR);
            }
          // fall through
          case 75: break;
          case 8:
            { return RBRACE;
            }
          // fall through
          case 76: break;
          case 9:
            { yypushback(1);
        yyPushState(IN_COMPONENT_IMPORT);
        return WHITE_SPACE;
            }
          // fall through
          case 77: break;
          case 10:
            { yyResetState(YYINITIAL);
        return RBRACE;
            }
          // fall through
          case 78: break;
          case 11:
            { yyResetState(YYINITIAL);
    return BAD_CHARACTER;
            }
          // fall through
          case 79: break;
          case 12:
            { return WHITE_SPACE;
            }
          // fall through
          case 80: break;
          case 13:
            { yypushback(1); // IN_CSS_DECLARATION_PARAMS handles parens nesting
        yyPushState(IN_CSS_DECLARATION_PARAMS);
            }
          // fall through
          case 81: break;
          case 14:
            { return CSS_CLASS_ID;
            }
          // fall through
          case 82: break;
          case 15:
            { return GO_CSS_DECL_PARAMS;
            }
          // fall through
          case 83: break;
          case 16:
            { parensNestingLevel++;
        if (parensNestingLevel == 1) {
            return LPARENTH;
        }
            }
          // fall through
          case 84: break;
          case 17:
            { parensNestingLevel--;
        if (parensNestingLevel == 0) {
            yyPopState(); // IN_CSS_DECLARATION_START
            return RPARENTH;
        }
            }
          // fall through
          case 85: break;
          case 18:
            { return CSS_PROPERTIES;
            }
          // fall through
          case 86: break;
          case 19:
            { return SCRIPT_FUNCTION_DECL;
            }
          // fall through
          case 87: break;
          case 20:
            { return SCRIPT_BODY;
            }
          // fall through
          case 88: break;
          case 21:
            { return GO_FRAGMENT;
            }
          // fall through
          case 89: break;
          case 22:
            { return GO_EXPR;
            }
          // fall through
          case 90: break;
          case 23:
            { braceNestingLevel++;
        return LBRACE;
            }
          // fall through
          case 91: break;
          case 24:
            { braceNestingLevel--;
       if (braceNestingLevel == 0) {
           yyPopState(); // IN_COMPONENT_IMPORT
       }
       return RBRACE;
            }
          // fall through
          case 92: break;
          case 25:
            { return TEMPL_FRAGMENT;
            }
          // fall through
          case 93: break;
          case 26:
            { braceNestingLevel++;
        return TEMPL_FRAGMENT;
            }
          // fall through
          case 94: break;
          case 27:
            { braceNestingLevel--;
       if (braceNestingLevel == 0) {
           yyPopState(); // IN_HTML_TAG_OPENER
       }
       return TEMPL_FRAGMENT;
            }
          // fall through
          case 95: break;
          case 28:
            { return COMPONENT_REFERENCE;
            }
          // fall through
          case 96: break;
          case 29:
            { return COMPONENT_IMPORT_START;
            }
          // fall through
          case 97: break;
          case 30:
            { yyPopState(); // IN_TEMPL_DECLARATION_BODY
        return LBRACE;
            }
          // fall through
          case 98: break;
          case 31:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 99: break;
          case 32:
            { return resolveStateDefaultToken(peekPreviousState());
            }
          // fall through
          case 100: break;
          case 33:
            { yyPopState();
        return resolveStateDefaultToken(yystate());
            }
          // fall through
          case 101: break;
          case 34:
            { yyPopState();
        yypushback(1); // So that we can detect component imports "@" straight after ">".
            }
          // fall through
          case 102: break;
          case 35:
            { if (isCommentEnabled()) {
        yyPushState(IN_BLOCK_COMMENT);
        return BLOCK_COMMENT;
    }
    yypushback(yylength() - 1);
            }
          // fall through
          case 103: break;
          case 36:
            { if (isCommentEnabled()) {
        return LINE_COMMENT;
    }
    yypushback(yylength() - 1);
            }
          // fall through
          case 104: break;
          case 37:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yyReplaceState(IN_TEMPL_DECLARATION_BODY);
        return LBRACE;
            }
          // fall through
          case 105: break;
          case 38:
            { yypushback(1);
        yyPushState(IN_COMPONENT_IMPORT);
        return HTML_FRAGMENT;
            }
          // fall through
          case 106: break;
          case 39:
            { yyPushState(IN_RAW_GO);
        return DOUBLE_LBRACE;
            }
          // fall through
          case 107: break;
          case 40:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yyPushState(IN_CSS_DECLARATION_BODY);
        return LBRACE;
            }
          // fall through
          case 108: break;
          case 41:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yyReplaceState(IN_SCRIPT_DECLARATION_BODY);
        return LBRACE;
            }
          // fall through
          case 109: break;
          case 42:
            { yyPopState();
        return DOUBLE_RBRACE;
            }
          // fall through
          case 110: break;
          case 43:
            { yypushback(yylength()-1);
        yyPopState();
        return COMPONENT_REFERENCE;
            }
          // fall through
          case 111: break;
          case 44:
            { yypushback(1);
        yyReplaceState(IN_COMPONENT_IMPORT_CHILDREN_BLOCK_START);
        return WHITE_SPACE;
            }
          // fall through
          case 112: break;
          case 45:
            { yyPopState();
        return BLOCK_COMMENT;
            }
          // fall through
          case 113: break;
          case 46:
            { // Ignore escaped quotes.
        return resolveStateDefaultToken(peekPreviousState());
            }
          // fall through
          case 114: break;
          case 47:
            { yyPushState(IN_CSS_DECLARATION_START);
        return CSS_DECL_START;
            }
          // fall through
          case 115: break;
          case 48:
            { yyPopState();
        return HTML_FRAGMENT;
            }
          // fall through
          case 116: break;
          case 49:
            { // Skip over attribute value so that we don't detect keywords in it.
        return HTML_FRAGMENT;
            }
          // fall through
          case 117: break;
          case 50:
            { yypushback(1); // IN_EXPR handles brace nesting
        yyPushState(IN_EXPR);
        return BOOL_EXPR_START;
            }
          // fall through
          case 118: break;
          case 51:
            { yyPushState(IN_HTML_COMMENT);
        return HTML_FRAGMENT;
            }
          // fall through
          case 119: break;
          case 52:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return GO_IF_START_FRAGMENT;
            }
          // fall through
          case 120: break;
          case 53:
            { yyPushState(IN_TEMPL_DECLARATION_START);
        return HTML_DECL_START;
            }
          // fall through
          case 121: break;
          case 54:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { return GO_IF_START_FRAGMENT;
            }
          // fall through
          case 122: break;
          case 55:
            { yyPushState(IN_SCRIPT_DECLARATION_START);
        return SCRIPT_DECL_START;
            }
          // fall through
          case 123: break;
          case 56:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return GO_CASE_FRAGMENT;
            }
          // fall through
          case 124: break;
          case 57:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return GO_FOR_START_FRAGMENT;
            }
          // fall through
          case 125: break;
          case 58:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return GO_ELSE_START_FRAGMENT;
            }
          // fall through
          case 126: break;
          case 59:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { return GO_CASE_FRAGMENT;
            }
          // fall through
          case 127: break;
          case 60:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { return GO_FOR_START_FRAGMENT;
            }
          // fall through
          case 128: break;
          case 61:
            { // skip over class attributes for now
        yypushback(1);
        yyPushState(IN_CLASS_EXPR);
        return HTML_FRAGMENT;
            }
          // fall through
          case 129: break;
          case 62:
            { yypushback(1);
        return GO_PACKAGE_FRAGMENT;
            }
          // fall through
          case 130: break;
          case 63:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { return GO_ELSE_START_FRAGMENT;
            }
          // fall through
          case 131: break;
          case 64:
            { return GO_SWITCH_START_FRAGMENT;
            }
          // fall through
          case 132: break;
          case 65:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return GO_DEFAULT_FRAGMENT;
            }
          // fall through
          case 133: break;
          case 66:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return GO_ELSE_IF_START_FRAGMENT;
            }
          // fall through
          case 134: break;
          case 67:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { return GO_DEFAULT_FRAGMENT;
            }
          // fall through
          case 135: break;
          case 68:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { return GO_ELSE_IF_START_FRAGMENT;
            }
          // fall through
          case 136: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
